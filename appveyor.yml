# Config file for automatic testing at appveyor.com
environment:
  global:
    # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
    # /E:ON and /V:ON options are not enabled in the batch script intepreter
    # See: http://stackoverflow.com/a/13751649/163740
    CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\tools\\appveyor\\run_with_env.cmd"

  matrix:
    - PYTHON: "C:\\Miniconda36-x64"
      PYTHON_VERSION: "3.6"
      PYTHON_ARCH: "64"

    - PYTHON: "C:\\Miniconda-x64"
      PYTHON_VERSION: "2.7"
      PYTHON_ARCH: "64"

init:
  - ECHO %PYTHON% %PYTHON_VERSION% %PYTHON_ARCH% %HOME%


install:
  # If there is a newer build queued for the same PR, cancel this one.
  # The AppVeyor 'rollout builds' option is supposed to serve the same
  # purpose but it is problematic because it tends to cancel builds pushed
  # directly to master instead of just PR builds (or the converse).
  # credits: JuliaLang developers.
  - ps: if ($env:APPVEYOR_PULL_REQUEST_NUMBER -and $env:APPVEYOR_BUILD_NUMBER -ne ((Invoke-RestMethod `
      https://ci.appveyor.com/api/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG/history?recordsNumber=50).builds | `
      Where-Object pullRequestId -eq $env:APPVEYOR_PULL_REQUEST_NUMBER)[0].buildNumber) { `
        throw "There are newer queued builds for this pull request, failing early." }
  # these correspond to folder naming of miniconda installs on appveyor.  See
  # https://www.appveyor.com/docs/installed-software#python
  - if "%PYTHON_VERSION%" == "3.6" set "BASE_PYTHON_VERSION=36"
  - if "%PYTHON_ARCH%" == "64" set "ARCH_LABEL=-x64"
  - call "C:\Miniconda%BASE_PYTHON_VERSION%%ARCH_LABEL%\Scripts\activate.bat"
  - conda config --set always_yes yes
  - conda update -q conda
  - conda config --set auto_update_conda no
  - conda update -q --all
  - conda install -q pytest pytest-cov conda-build anaconda-client
  - conda info
  # this is to ensure dependencies
  - curl https://github.com/pyomeca/conda_recipes/raw/master/pyomeca/meta.yaml --create-dirs -o ./conda.recipe/meta.yaml
  - conda build conda.recipe --no-test
  - conda install --use-local pyomeca


# Not a .NET project, we build package in the install step instead
build: false

test_script:
  - py.test --color=yes -v --cov pyomeca --cov-report xml tests

on_success:
  - conda install -c conda-forge codecov
  - codecov --env PYTHON_VERSION --file C:\projects\pyomeca\coverage.xml
